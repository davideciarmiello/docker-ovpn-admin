name: GitHub Actions Demo
on: [push]
jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      remote_vers: ${{ steps.step_get_remote_version.outputs.remote_vers }}
      local_vers: ${{ steps.step_get_local_version.outputs.local_vers }}
      output: ${{ steps.step_success.outputs.output }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
    
      - name: Checkout
        run: |
          git clone https://github.com/flant/ovpn-admin.git
                  
      - id: step_get_remote_version
        name: Access cloned repository content
        run: |
          cd ovpn-admin
          vers="$(git describe --tags --abbrev=0).$(git log -1 --pretty='format:%cd' --date=format:'%Y%m%d%S')"
          echo "Current remote version: $vers"
          echo "remote_vers=$(vers)" >> $GITHUB_ENV
          echo "::set-output name=remote_vers::$vers"
          
      - id: step_get_local_version
        run: |
          touch current_version
          vers="$(cat current_version 2>/dev/null)"
          echo "Current local version: $vers"
          echo "local_vers=$(vers)" >> $GITHUB_ENV
          echo "::set-output name=local_vers::$vers"


      #- name: Set the statuses of Job 1, Job 2, Job3 as output parameters
      #  id: set_outputs
      #  run: |
      #    echo "::set-output name=status_job1::$(<pass_status_job1/status_job1.txt)"
      #    echo "::set-output name=status_job2::$(<pass_status_job2/status_job2.txt)"
      #    echo "::set-output name=status_job3::$(<pass_status_job3/status_job3.txt)"
      
      - name: Show the values of the outputs
        if: success()
        run: |
          # using the syntax steps.<step_id>.outputs.<output_name> to access the output parameters
          echo "remote_vers = ${{ steps.step_get_remote_version.outputs.remote_vers }}"
          echo "local_vers = ${{ steps.step_get_local_version.outputs.local_vers }}"
          

      - id: step_need_update
        #if: success() &&  steps.step_get_remote_version.remote_vers != steps.step_get_local_version.local_vers
        if: success() && ${{ steps.step_get_remote_version.outputs.remote_vers != steps.step_get_local_version.outputs.local_vers }}
        run:
          echo "need update"
          echo "::set-output name=output::true"
          #echo "Result of test-app was '${{ steps.step_get_remote_version.remote_vers }}'"
          #echo "Result of test-app was '${{ steps.step_get_local_version.local_vers }}'"
          #if [[ "${{ steps.step_get_remote_version.output }}" == "${{ steps.step_get_local_version.output }}" ]]; then
          #   echo "::set-output name=output::true"
          #else
          #   echo "::set-output name=output::false"
          #fi
          
      - id: step_success
        if: success()
        run: echo "::set-output name=output::success"
        

  job-compile-1:
    runs-on: ubuntu-latest
    needs: [version-check]
    outputs:
      output: ${{ steps.step1.outputs.test }}
    steps:
      - id: step0
        run: echo "something"

      - id: step1
        if: success()
        run: echo "::set-output name=test::success"

  version-committ:
    runs-on: ubuntu-latest
    needs: [version-check, job-compile-1]
    if: needs.version-check.outputs.output == 'success' && needs.version-check.outputs.local_vers != needs.version-check.outputs.remote_vers && needs.job-compile-1.outputs.output == 'success'
    steps:
      - run: echo ${{needs.version-check.outputs.remote_vers}} ${{needs.version-check.outputs.local_vers}} ${{needs.version-check.outputs.output}}
      - run: echo "Save remote vers after success compile"

  #Explore-GitHub-Actions:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    # - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    # - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    # - name: Check out repository code
    #   uses: actions/checkout@v3
    # - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
    # - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
    # - name: List files in the repository
    #   run: |
    #     ls ${{ github.workspace }}
    # - run: echo "üçè This job's status is ${{ job.status }}."
    # 
    # - name: Clone flant/ovpn-admin repository
    #   uses: GuillaumeFalourd/clone-github-repo-action@v2
    #   with:
    #     owner: 'flant'
    #     repository: 'ovpn-admin'
    # - name: Access cloned repository content
    #   run: |
    #     cd ovpn-admin
    #     ls -la
    #     cat .git/refs/heads/master
      #- uses: stefanzweifel/git-auto-commit-action@v4
      #  with:
      #    commit_message: Apply ovpn-admin changes

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v2
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v2
    # - name: Login to DockerHub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USER }}
    #     password: ${{ secrets.DOCKER_PASS }}      
      
     # - name: Build and push
     #   uses: docker/build-push-action@v3
     #   with:
     #     context: .
     #     platforms:  linux/arm/v7,linux/arm64/v8,linux/amd64
     #     push: true
     #     tags: davideciarmi/ovpn-admin:latest
          
      #- name: Push ovpn-admin image to Docker Hub
      #  uses: docker/build-push-action@v1
      #  with:
      #    username: ${{ secrets.DOCKER_USER }}
      #    password: ${{ secrets.DOCKER_PASS }}
      #    repository: flant/ovpn-admin
      #    tags: latest
      #    dockerfile: Dockerfile
      #    
